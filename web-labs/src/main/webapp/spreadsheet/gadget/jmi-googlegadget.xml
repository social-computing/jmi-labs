<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs height="250"
    title="Just Map It! Spreadsheet Gadget"
    description="Just Map It! for Google spreadsheet"
    author="Social Computing" author_email="justmapit@social-computing.com" author_link="http://www.social-computing.com"
    screenshot="http://feeds.just-map-it.com/images/screenshot.png" 
    thumbnail="http://feeds.just-map-it.com/images/thumbnail.png">
      <Icon>http://labs.just-map-it.com/favicon.ico</Icon>
</ModulePrefs>
<UserPref name="_table_query_url" display_name="Data source url" required="true"/>
<UserPref name="_table_query_refresh_interval" display_name="Data refresh interval (minutes)" default_value="0" datatype="enum" required="true">
<EnumValue value="0" display_value="Do not refresh"/>
<EnumValue value="60" display_value="1"/>
<EnumValue value="300" display_value="5"/>
<EnumValue value="1800" display_value="30"/>
</UserPref>
<Content type="html"><![CDATA[ 

<link rel="stylesheet" type="text/css" href="http://labs.just-map-it.com/jmi-client/css/jmi-client.css" />
<script src="http://www.google.com/jsapi" type="text/javascript"></script>
<script src="http://labs.just-map-it.com/jmi-client/jmi-client.js" type="text/javascript"></script>

<table width="100%" height="100%" id="main" border=0 cellspacing=0 cellpadding=0>
      <tr height="30">
        <td><div id="breadcrumb">&nbsp;</div></td>
      </tr>
      <tr height="100%">
        <td><div id="map" style="height:100%; width:100%"></div></td>
      </tr>
</table>

<script type="text/javascript">
   
	JMI.namespace("google.Spreadsheet");
	
	// Mandatory 
	JMI.google.Spreadsheet = function(container) {
	  this.container = container;
	}	
		
	// Mandatory 
	JMI.google.Spreadsheet.prototype.draw = function(data, options) {
      var map = JMI.Map({
              parent: this.container, 
              clientUrl: 'http://labs.just-map-it.com/jmi-client/', 
              server: 'http://server.just-map-it.com',
              method: 'POST'
            });
      map.addEventListener(JMI.Map.event.ACTION, function(event) {
          JMI.google.Spreadsheet[event.fn](event.map, event.args);
        } );
      new JMI.extensions.Breadcrumb('breadcrumb',map,{'namingFunc':JMI.google.Spreadsheet.JMIF_breadcrumbTitlesFunc,'thumbnail':{}});
      new JMI.extensions.Slideshow(map);
	  
	  map.spreadsheetData = data;
      map.breadcrumbTitles = { shortTitle: 'Initial map', longTitle: 'Initial map' };
      
	  var parameters = JMI.google.Spreadsheet.getParams();
      parameters.analysisProfile='GlobalProfile';
      parameters.data = gadgets.json.stringify(map.spreadsheetData);
      
	  map.compute( parameters);
	}
	
    JMI.google.Spreadsheet.JMIF_breadcrumbTitlesFunc = function(event) {
      if( event.type === JMI.Map.event.EMPTY) {
        return {shortTitle: 'Sorry, the map is empty.', longTitle: 'Sorry, the map is empty.'};
      }
      if( event.type === JMI.Map.event.ERROR) {
        return {shortTitle: 'Sorry, an error occured.' + event.message, longTitle: 'Sorry, an error occured. Error: ' + event.message};
      }
      return event.map.breadcrumbTitles;
    };
	
    JMI.google.Spreadsheet.getParams = function() {
      return {
        map: 'SpreadSheet',
        spreadsheetserverurl: 'http://labs.just-map-it.com',
        inverted: false,
        sheetUrl: 'SpreadSheet hardcoded url'
        };
    };

    JMI.google.Spreadsheet.JMIF_Navigate = function(map, url) {
      window.open( url, "_blank");
    };
	
    JMI.google.Spreadsheet.JMIF_Focus = function(map, args) {
      var parameters = JMI.google.Spreadsheet.getParams();
      parameters.entityId = args[0];
      parameters.data = gadgets.json.stringify(map.spreadsheetData);
      map.compute( parameters);
      map.breadcrumbTitles.shortTitle = "Focus";
      map.breadcrumbTitles.longTitle = "Focus on: " + args[1];
    };
	
    JMI.google.Spreadsheet.JMIF_Center = function(map, args) {
      var parameters = JMI.google.Spreadsheet.getParams();
      parameters.attributeId = args[0];
      parameters.analysisProfile = "DiscoveryProfile";
      parameters.data = gadgets.json.stringify(map.spreadsheetData);
      map.compute( parameters);
      map.breadcrumbTitles.shortTitle = "Centered";
      map.breadcrumbTitles.longTitle = "Centered on: " + args[1];
    };   

    JMI.google.Spreadsheet.loadVisualizationAPI = function() { 
        google.load("visualization", "1");
        google.setOnLoadCallback(JMI.google.Spreadsheet.sendQuery);
    };

    JMI.google.Spreadsheet.sendQuery = function() {
        var prefs = new _IG_Prefs(); // User preferences 
        gadgetHelper = new google.visualization.GadgetHelper(); 
        var query = gadgetHelper.createQueryFromPrefs(prefs);
        query.send(JMI.google.Spreadsheet.handleQueryResponse);
    };

    JMI.google.Spreadsheet.handleQueryResponse = function(response) {
        /**
         * Use the visualization GadgetHelper class to handle errors 
         */
        if (!gadgetHelper.validateResponse(response)) {
            return;     // Default error handling was done, just leave. 
        }

        /**
         * GET THE DATA FROM THE SPREADSHEET
         */
        var row, col, data = response.getDataTable();
        
        /* Initializing data */
        var entities = [];
        var attributes = [];
                
        /**
         * Reading the first line header as entities
         */
        for (col = 1; col < data.getNumberOfColumns(); col++) {
            entities.push({ "id": col+'', "name": data.getFormattedValue(0, col), "attributes": []});
        }
        
        /**
         * Reading the first line header as attributes
         */
        for (var row = 1; row < data.getNumberOfRows(); row++) {
            attributes.push({"id": row+'', "name": data.getFormattedValue(row, 0)});
        }
        
        /**
         * Process all Rows in the specified range
         */
        for ( row = 1; row < data.getNumberOfRows(); row++) {
            for ( col = 1; col < data.getNumberOfColumns(); col++) {
                var formattedValue = data.getFormattedValue(row, col);
                if(formattedValue != "") {
                    var entity = entities[col-1];
                    entity.attributes.push({"id": row+''});
                }
            }
        }

        // Updating data variable
        var jmidata = {
            "entities": entities,
            "attributes": attributes
        };
        
        var map = new JMI.google.Spreadsheet('map');
        map.draw( jmidata, {});

	};
	
    var gadgetHelper = null;
    _IG_RegisterOnloadHandler(JMI.google.Spreadsheet.loadVisualizationAPI);	
</script>

]]>
</Content>
</Module>